   1: a=5; b='aaa'; c=True
   2: print (a)
   3: my_list=[1,2,3]
   4: my_list[1]
2
   5: my_list[1]=4
   6: my_list
[1, 4, 3]
   7: c=[]
   8: my_list[4]=3
   9: my_list=[True,'test',23,88.45]
  10: my_list[]
  11: my_list[0]
True
  12: my_tupla=()
  13: my_tupla=(12,45,'Test')
  14: my_tupla
(12, 45, 'Test')
  15: my_tupla(0)
  16: my_tupla[0]
12
  17: my_tupla[0]=1
  18: my_tupla(0)=1
  19: my_tupla[1]=1
  20: my_tupla=(1,2,3)
  21: id(mu_tupla)
  22: id(my_tupla)
140463579488048
  23: my_tupla=(1,2,4)
  24: id(my_tupla)
140463528127008
  25: my_list=(1,2,4)
  26: id (my_list)
140463551609304
  27: my_list=(1,2,5)
  28: id (my_list)
140463454421424
  29: my_list[1]=7
  30: my_list[0]=7
  31: isinstance (my_list, tuple)
True
  32: isinstance (my_tupla, tuple)
True
  33: my_list=(1,2,5)
  34: isinstance (my_list, tuple)
True
  35: isinstance (my_list, list)
False
  36: type (my_list)
tuple
  37: a=[1,2,3]
  38: type(a)
list
  39: a.append(4)
  40: a
[1, 2, 3, 4]
  41: id(a)
140463433933192
  42: id(b)
140463443609616
  43: b=a
  44: id(b)
140463433933192
  45: c=a.copy
  46: id(c)
140463454672144
  47: a.append(5)
  48: id(a)
140463433933192
  49: a[2]=3
  50: id(a)
140463433933192
  51: a[2]=5
  52: id(a)
140463433933192
  53: a
[1, 2, 5, 4, 5]
  54: a= [5,4,3,2,1]
  55: id(a)
140463434140616
  56: tupla=(1,2,3,4,5)
  57: type(tupla)
tuple
  58: type(lista)
  59: type(a)
list
  60: id(tupla)
140463434132032
  61: tupla[1]=3
  62: tupla.append(7)
  63: a='text'
  64: type(a)
str
  65: dir(a)
['__add__',
 '__class__',
 '__contains__',
 '__delattr__',
 '__dir__',
 '__doc__',
 '__eq__',
 '__format__',
 '__ge__',
 '__getattribute__',
 '__getitem__',
 '__getnewargs__',
 '__gt__',
 '__hash__',
 '__init__',
 '__init_subclass__',
 '__iter__',
 '__le__',
 '__len__',
 '__lt__',
 '__mod__',
 '__mul__',
 '__ne__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__rmod__',
 '__rmul__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 'capitalize',
 'casefold',
 'center',
 'count',
 'encode',
 'endswith',
 'expandtabs',
 'find',
 'format',
 'format_map',
 'index',
 'isalnum',
 'isalpha',
 'isdecimal',
 'isdigit',
 'isidentifier',
 'islower',
 'isnumeric',
 'isprintable',
 'isspace',
 'istitle',
 'isupper',
 'join',
 'ljust',
 'lower',
 'lstrip',
 'maketrans',
 'partition',
 'replace',
 'rfind',
 'rindex',
 'rjust',
 'rpartition',
 'rsplit',
 'rstrip',
 'split',
 'splitlines',
 'startswith',
 'strip',
 'swapcase',
 'title',
 'translate',
 'upper',
 'zfill']
  66: hasattr(a, 'split')
True
  67: a=2
  68: type(a)
int
  69: str(a)
'2'
  70: type(a)
int
  71: a='2'
  72: type(a)
str
  73: a.int()
  74: a.format(int)
'2'
  75: type(a)
str
  76: a=345
  77: type(a)
int
  78: str(a)
'345'
  79: type(a)
int
  80: a=567
  81: a
567
  82: isinstance(a,str)
False
  83: str(a)
'567'
  84: isinstance(a,str)
False
  85: a
567
  86: a='567'
  87: a
'567'
  88: isinstance(a,str)
True
  89: type(a)
str
  90: fval=float(s)
  91: fval=float('3,14')
  92: fval=float(3,14)
  93: s='3,14'
  94: fval=float(s)
  95: s=3,14
  96: fval=float(s)
  97: s='3.14'
  98: fval=float(s)
  99: type(fval)
float
 100: fval
3.14
 101: x=1
 102:
if x<0:
    print('noooo)
 103:
if x<0:
    print('nooo')
    ;
 104:
if x>0:
    print('nooo')
    ;
 105:
if x>0:
    print('nooo')
    print('second')
 106: if x>0:print('siiii')
 107: secuence=[1,2,None,4,None,5]
 108: Total=0
 109:
for value in secuence:
    if valu is None:
        continue
    Total +=value
 110:
for value in secuence:
    if value is None:
        continue
    Total +=value
 111: Total
12
 112: type(Total)
int
 113: type(value)
int
 114: x
1
 115: a=5; b=7
 116: c=8; d=4
 117:
if a<b or c>d:
    print "Correcto"
 118:
if a<b or c>d:
    print"Correcto"
 119:
if a < b or c > d:
    print"Correcto"
 120:
if a < b or c > d:
    print "Correcto"
 121: a
5
 122: if a < b or c > d: print "Correcto"
 123: if a < b or c > d: print ("Correcto")
 124: if a < b or c < d: print ("Correcto")
 125: sequence =[1,2, 0, 4, 6, 5, 2, 1]
 126:
for value in secuence:
    if value == 5:
        break
    total_until5 +=value
 127: tota_until5=0
 128:
for value in secuence:
    if value == 5:
        break
    total_until5 +=value
 129: total_until5=0
 130: total_until5
0
 131:
for value in secuence:
    if value == 5:
        break
    total_until5 +=value
 132:
for value in secuence:
    if value==5:
        break
    total_until5 +=value
 133:
for value in secuence:
    if value==5:
        break
    total_until5 +=value
 134:  total_until5=0
 135:
for value in secuence:
    if value==5:
        break
    total_until5 +=value
 136:
for value in secuence:
    if value=5:
        break
    total_until5 +=value
 137:
for i in [0,1,2,3]:
    print(i)
 138:
for value in secuence:
    if value == 5:
        break
    total_until5 += value
 139:
for value in secuence:
    if value==5:
        break
    total_until5 += value
 140: type(total_until5)
int
 141:
for i in range(4):
    print(i)
 142: for char in "texto"; print(char)
 143: for char in "texto": print(char)
 144: x=256
 145: total=0
 146: total
0
 147:
while x>0:
    if total > 500:
        break
    total +=x
    x=x/2
 148: x
4.0
 149: total
504.0
 150: def my_func (x, y, z=1.5);
 151:
def my_func (x, y, z=1.5):
    if  z>1:
        return z*(x+y)
    else:
        return z/(x+y)
 152: my_func (2,3)
7.5
 153: my_func (y=2,x=3)
7.5
 154: my_func (y=2,x=3, z=1)
0.2
 155: my_func (y=2,x=3, z=2)
10
 156:
def func():
    global a=[]
 157:
def func():
    global a
    a = []
    for i in range(6):
        a.appen(i)
        print(i)
        print(a)
 158: func()
 159:
def func():
    global a
    a = []
    for i in range(6):
        a.appen(i)
        print(i)
        print(a)
 160: func()
 161:
def func():
    global a
    a = []
    for i in range(6):
        a.append(i)
        print(i)
        print(a)
 162: func()
 163: import some_module
 164:
def sum_double(a, b):
    if a == b:
        sum=a+b
    else:
        sum=2*(a+b)
    reurt sum
 165:
def sum_double(a, b):
    if a == b:
        sum=a+b
    else:
        sum=2*(a+b)
    return sum
 166: sum_double(1,1)
2
 167: sum_double(1,2)
6
 168:
def makes10(a, b):
    if a ==10 or b==10 or (a+b)==10:
        print ("True")
    else:
        print("false")
 169: makes10(1,10)
 170: makes10(1,5)
 171: makes10(5,5)
 172:
def centenario(nombre, year):
    if not isinstance (year, int):
        int(year) 
        year=year(int)
    print("% sera 100 a√±os mas viejo en %d" %(nombre, year+100))
 173: centenario('Antonio','1920')
 174: centenario('Antonio',1920)
 175: a='Esto es una prueba'
 176: a.find(s)
-1
 177: a.find('s')
1
 178: a.split()
['Esto', 'es', 'una', 'prueba']
 179: a.remplace ('a', 'A')
 180: a.remplace('a','A')
 181: a.remplace('es','no')
 182: a='Esto es una prueba'
 183: a.remplace('a','A')
 184: a.replace('a','A')
'Esto es unA pruebA'
 185: a.find('a')
10
 186: a.index('es')
5
 187: a.find('es')
5
 188: a
'Esto es una prueba'
 189: a.capitalize
<function str.capitalize>
 190: a.capitalize()
'Esto es una prueba'
 191: a.upper()
'ESTO ES UNA PRUEBA'
 192: a.capitalize()
'Esto es una prueba'
 193: a.count(a)
1
 194: a.count(s)
0
 195: a.count('s')
2
 196: a.count('a')
2
 197: a.split()
['Esto', 'es', 'una', 'prueba']
 198: a=a.split()
 199: type(a)
list
 200: a='Esto es una prueba'
 201: a=a.split('')
 202: a=a.split("")
 203: a='Esto es una       prueba'
 204: a=a.split()
 205: a
['Esto', 'es', 'una', 'prueba']
 206: a='Esto es una       prueba'
 207: a=a.split('T')
 208: a
['Esto es una       prueba']
 209: a='Esto es una       prueba'
 210: a=a.split("T")
 211: a
['Esto es una       prueba']
 212: a='Esto es una   prueba'
 213: a=a.splitlines()
 214: a
['Esto es una   prueba']
 215: a='Esto es una   prueba'
 216: a.splitlines('S')
 217: a.splitlines("S")
 218: a='Esto es una   prueba'
 219: "^".join(a)
'E^s^t^o^ ^e^s^ ^u^n^a^ ^ ^ ^p^r^u^e^b^a'
 220: "^".join(a.split())
'Esto^es^una^prueba'
 221: list(a.split())
['Esto', 'es', 'una', 'prueba']
 222: a.split()
['Esto', 'es', 'una', 'prueba']
 223: list(c.splitlines())
 224: c[0]='f'
 225: a='this is string'
 226: a[0]
't'
 227: a[3.4]
 228: a[3:4]
's'
 229: a[2:3]
'i'
 230: a[2:10:2]
'i ss'
 231: a='1234567890'
 232: a[2:6:2]
'35'
 233: a[-1]
'0'
 234: a[::-1]
'0987654321'
 235: a[-1:-1]
''
 236: a[:-1:-1]
''
 237: a[:1:-1]
'09876543'
 238: a[:1:]
'1'
 239: a[:1]
'1'
 240:
def multiple(string, num):
    result=""
    for i in range(num).
 241:
def multiple(string, num):
    result=""
    for i in range(num):
        result= result + string
    return result
 242: multiple('Esto es una prueba',2)
'Esto es una pruebaEsto es una prueba'
 243:
def string_bits(string):
    result=""
    for i in (range(leng(string)):
     if i%2 ==0:
       result=result+str[i]
    return result
 244:
def string_bits(string):
    result=""
    for i in (range(len(string)):
     if i%2 ==0:
       result=result+str[i]
    return result
 245:
def string_bits(string):
    result=""
    for i in (range(len(string))):
     if i%2 ==0:
       result=result+str[i]
    return result
 246: string ('Hola Casa d troya')
 247: string ("Hola Casa d troya")
 248: string_bits ("Hola Casa d troya")
 249:
def string_bits(string):
    result=""
    for i in (range(len(string))):
     if i%2 ==0:
       result=result + str[i]
    return result
 250: string_bits("Hola Casa d troya")
 251:
def string_bits(string):
    result=""
    for i in range(len(string)):
     if i%2 == 0:
       result=result+str[i]
    return result
 252: string_bits("Hola Casa d troya")
 253:
def string_bits(string):
    result=""
    for i in range(len(string)):
        if i%2 == 0:
            result=result+str[i]
    return result
 254: string_bits("Hola Casa d troya")
 255:
def string_bits(string):
    result=""
    for i in range(len(string)):
        if i%2 ==0:
            result=result+string[i]
    return result
 256: string_bits("Hola Casa d troya")
'Hl aadtoa'
 257:
def wc(string):
    char=""
    for char in string:
        char+=1
    words=len(string.split())
    lines=len(string.split("\n")
    return (lines, words, chars)
 258:
def wc(string):
    char=""
    for char in string:
        char+=1
    words=len(string.split())
    lines=len(string.split("\n")
    return (lines, words, char)
 259:
def wc(string):
    chars=""
    for char in string:
        chars+=1
    words=len(string.split())
    lines=len(string.split("\n")
    return (lines, words, chars)
 260:
def wc(string):
    chars=""
    for char in string:
        chars+=1
    words=len(string.split())
    lines=len(string.split("\n"))
    return (lines, words, chars)
 261: wc("Esta es la casa de la pradera")
 262:
def wc(string):
    chars=0
    for char in string:
        chars+=1
    words=len(string.split())
    lines=len(string.split("\n"))
    return (lines, words, chars)
 263: wc("Esta es la casa de la pradera")
(1, 7, 29)
 264:
def romove_char(string, n):
    if not string:
        return ("Empty")
    else:
        primera_parte=string[:n]
        segunda_parte=string[n+1:]
        resultado=primera_parte+segunda_parte
        return resultado
 265: romove('0123456',3)
 266: romove_char('0123456',3)
'012456'
 267:
def combo_str(a, b):
    if len(a)>len(b):
        return b+a+b
    elif len(a)==len(b):
        return "They are the same"
    else:
        return a+b+a
 268: combo_str(4,4)
 269: combo_str("casa", "pato")
'They are the same'
 270: combo_str("casa", "patos")
'casapatoscasa'
 271: %dhist,_dh
 272: !pwd
 273: cd ..
 274: !pwd
 275: ! cd ..
 276: !pwd
 277: ! grep -i "hello" hello_world.py
 278: !grep -i "hello" hello_world.py
 279: !touch  hello_world.py
 280: !grep -i "hello" hello_world.py
 281: !ll
 282: !ls -l
 283: kwrite hello_world.py &
 284: kwrite hello_world.py
 285: !kwrite hello_world.py
 286: %lsmagic
Available line magics:
%alias  %alias_magic  %autocall  %autoindent  %automagic  %bookmark  %cat  %cd  %clear  %colors  %config  %cp  %cpaste  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %paste  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode

Available cell magics:
%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile

Automagic is ON, % prefix IS NOT needed for line magics.
 287: %lsmagic -n
Available line magics:
%alias  %alias_magic  %autocall  %autoindent  %automagic  %bookmark  %cat  %cd  %clear  %colors  %config  %cp  %cpaste  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %paste  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode

Available cell magics:
%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile

Automagic is ON, % prefix IS NOT needed for line magics.
 288:
%%!
pwd
cd ..
pwd
['/home/dsc/Repositories/master-data-science-nacho', '/home/dsc/Repositories']
 289:
%%!
cd master-data-science-nacho
pwd
['zsh:cd:1: no such file or directory: master-data-science-nacho',
 '/home/dsc/Repositories/master-data-science-nacho']
 290: %history 1-10
 291: %history -n 1-10
 292: %history -n -o 1-10
 293: %history -n -o
 294: %history -n -o -f history_ipython.tx
